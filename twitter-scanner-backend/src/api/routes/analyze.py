"""Tweet analysis route."""

import time
from datetime import datetime
from fastapi import APIRouter, HTTPException, Request, Depends

from core.models import AnalyzeRequest, AnalyzeResponse, UsageInfo
from core.logging_config import get_logger
from services.claude_client import ClaudeClient, ClaudeAPIError
from utils.rate_limiter import rate_limit_manager

router = APIRouter()
logger = get_logger("api.analyze")

# Initialize Claude client
claude_client = ClaudeClient()


# Dependencies for rate limiting
async def check_rate_limit(request: Request):
    """Dependency to check rate limits."""
    is_allowed, retry_after = rate_limit_manager.check_rate_limit(request)
    if not is_allowed:
        client_ip = rate_limit_manager.get_client_ip(request)
        logger.warning(
            "Rate limit exceeded", client_ip=client_ip, retry_after=retry_after
        )
        raise HTTPException(
            status_code=429,
            detail={"error": "Too many requests", "retry_after": retry_after},
        )


async def check_usage_limit(request: Request):
    """Dependency to check usage limits."""
    is_allowed, usage_info = rate_limit_manager.check_usage_limit(request)
    if not is_allowed:
        client_ip = rate_limit_manager.get_client_ip(request)
        logger.warning(
            "Usage limit exceeded", client_ip=client_ip, usage_info=usage_info
        )
        raise HTTPException(
            status_code=429,
            detail={
                "error": f"Free usage limit reached ({usage_info['limit']} requests per 24 hours)",
                "usage": usage_info["usage"],
                "limit": usage_info["limit"],
                "reset_time": usage_info["reset_time"],
            },
        )

    # Store usage info in request state for later use
    request.state.usage_info = usage_info
    return usage_info


@router.post(
    "/api/analyze",
    response_model=AnalyzeResponse,
    dependencies=[Depends(check_rate_limit), Depends(check_usage_limit)],
)
async def analyze_tweets(request: Request, analyze_request: AnalyzeRequest):
    """
    Analyze tweets using Claude API.

    This endpoint accepts a list of tweets and returns an analysis
    generated by Claude AI, formatted in markdown.
    """
    start_time = time.time()
    client_ip = rate_limit_manager.get_client_ip(request)
    request_id = f"{client_ip}_{int(start_time)}"

    # Calculate basic metrics
    tweet_count = len(analyze_request.tweets)
    total_content_length = sum(len(tweet.content) for tweet in analyze_request.tweets)

    def get_processing_time_ms() -> int:
        """Get processing time in milliseconds."""
        return int((time.time() - start_time) * 1000)

    def log_error_and_raise(error_msg: str, status_code: int = 500, **extra_context):
        """Log error and raise HTTPException."""
        logger.error(
            "request processing failed",
            request_id=request_id,
            client_ip=client_ip,
            error=error_msg,
            status_code=status_code,
            processing_time_ms=get_processing_time_ms(),
            tweet_count=tweet_count,
            **extra_context,
        )

        raise HTTPException(
            status_code=status_code,
            detail={
                "success": False,
                "error": error_msg,
                "processingTime": get_processing_time_ms(),
            },
        )

    # Log request start
    logger.info(
        "start tweet analysis",
        request_id=request_id,
        client_ip=client_ip,
        tweet_count=tweet_count,
        content_length=total_content_length,
        current_usage=request.state.usage_info["usage"],
    )

    try:
        # Call Claude API
        analysis = await claude_client.analyze_tweets(
            analyze_request.tweets, analyze_request.system_prompt
        )

        # Update usage counter
        updated_usage = rate_limit_manager.increment_usage(request)
        processing_time_ms = get_processing_time_ms()

        # Log successful completion
        logger.info(
            "tweet analysis completed",
            request_id=request_id,
            client_ip=client_ip,
            processing_time_ms=processing_time_ms,
            analysis_length=len(analysis),
            new_usage=updated_usage["usage"],
        )

        return AnalyzeResponse(
            success=True,
            analysis=analysis,
            usage=UsageInfo(
                current=updated_usage["usage"],
                limit=updated_usage["limit"],
                remaining=updated_usage["remaining"],
            ),
            processingTime=processing_time_ms,
        )

    except ClaudeAPIError as e:
        # Determine error type
        if e.status_code == 429:
            status_code = 429
        elif e.status_code and 400 <= e.status_code < 500:
            status_code = 400
        else:
            status_code = 500

        log_error_and_raise(
            error_msg=e.message,
            status_code=status_code,
            claude_status_code=e.status_code,
            attempt=e.attempt,
            error_type="claude_api_error",
        )

    except Exception as e:
        log_error_and_raise(
            error_msg="Internal server error",
            status_code=500,
            original_error=str(e),
            error_type=type(e).__name__,
        )
